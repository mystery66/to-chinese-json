// 测试文件：验证标点符号过滤和智能分割功能

// 包含多种标点符号和特殊符号的中文文本
const complexMessages = {
  // 应该分割成多个独立的中文片段
  mixed1: '🔥 热门👍推荐',           // 应该分割为: "热门", "推荐"
  mixed2: '✅ 操作成功！请继续',      // 应该分割为: "操作成功", "请继续"
  mixed3: '📝 数据保存, 系统更新',    // 应该分割为: "数据保存", "系统更新"
  mixed4: '⚠️ 警告：网络异常！',      // 应该分割为: "警告", "网络异常"
  mixed5: '🎉 恭喜你@获得奖励#成功',   // 应该分割为: "恭喜你", "获得奖励", "成功"
  
  // 包含各种标点符号
  punctuation1: '用户登录,系统验证',   // 应该分割为: "用户登录", "系统验证"
  punctuation2: '数据加载...请等待',  // 应该分割为: "数据加载", "请等待"
  punctuation3: '文件上传(成功)',     // 应该分割为: "文件上传", "成功"
  punctuation4: '任务完成[已确认]',    // 应该分割为: "任务完成", "已确认"
  punctuation5: '状态更新|正常运行',   // 应该分割为: "状态更新", "正常运行"
  
  // 复杂混合场景
  complex1: '🚀启动&初始化✨完成',     // 应该分割为: "启动", "初始化", "完成"
  complex2: '📊数据统计:用户活跃度',   // 应该分割为: "数据统计", "用户活跃度"
  complex3: '💡提示"操作成功"确认',    // 应该分割为: "提示", "操作成功", "确认"
  
  // 应该保留的纯中文（不分割）
  pure1: '用户管理系统',
  pure2: '数据备份完成',
  pure3: '网络连接正常'
};

// 数组测试
const statusArray = [
  '🔥热门🎯推荐',
  '✅成功❌失败',
  '📈上升📉下降',
  '纯中文状态'
];

// 函数测试
function processStatus(status) {
  const messages = {
    success: '🎉操作成功！继续下一步',
    error: '❌错误：请重试操作',
    warning: '⚠️警告@注意安全'
  };
  return messages[status] || '默认提示信息';
}
